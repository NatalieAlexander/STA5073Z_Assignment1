"0",""
"0","# Define the parameters for grid search"
"0","cp_grid <- seq(0.001, 1, length=10)"
"0","minbucket_grid <- seq(1, 10, 1)"
"0","minsplit_grid <- seq(1, 10, 1)"
"0",""
"0","#empty data frame to store results for each combination of parameters above"
"0","results <<- data.frame(cp = double(), minbucket = integer(), minsplit = integer(),"
"0","                      train_accuracy = double(), valid_accuracy = double(),"
"0","                      train_recall = double(), valid_recall = double(),"
"0","                      train_ppv = double(), valid_ppv = double(),"
"0","                      train_f1 = double(), valid_f1 = double())"
"0",""
"0","#number of folds"
"0","num_folds <- 5"
"0",""
"0","#create folds"
"0","set.seed(123)"
"0","folds <- createFolds(df_train$president_label, k = num_folds, list = TRUE)"
"0",""
"0","#for each combination of parameters..."
"0","for (cp_val in cp_grid) {"
"0","  for (minbuck in minbucket_grid) {"
"0","    for (minspl in minsplit_grid) {"
"0",""
"0","      ###########################################"
"0",""
"0","      #empty vectors for results at each fold..."
"0","      train_accuracy_values <- numeric(num_folds)"
"0","      valid_accuracy_values <- numeric(num_folds)"
"0",""
"0","      train_recall_values <- numeric(num_folds)"
"0","      valid_recall_values <- numeric(num_folds)"
"0",""
"0","      train_ppv_values <- numeric(num_folds)"
"0","      valid_ppv_values <- numeric(num_folds)"
"0",""
"0","      train_f1_values <- numeric(num_folds)"
"0","      valid_f1_values <- numeric(num_folds)"
"0",""
"0",""
"0","      ###########################################"
"0","      #for each fold..."
"0","      for (fold in 1:num_folds) {"
"0",""
"0","        #split data into k-fold train and validation sets"
"0","        train_indices <- unlist(folds[-fold]) #all folds except 1 fold"
"0","        valid_indices <- unlist(folds[fold]) #only 1 fold"
"0","        "
"0","        df_train_fold <- df_train[train_indices, ]"
"0","        df_valid_fold <- df_train[valid_indices, ]"
"0",""
"0","      ###########################################"
"0","        "
"0","        #fit the model on the training-fold data"
"0","        #with parameters at the current iteration"
"0","        set.seed(123)"
"0","        tree_fit <- rpart(president_label ~ ., df_train_fold,"
"0","                          control = rpart.control(minsplit = minspl,"
"0","                                                  minbucket = minbuck,"
"0","                                                  cp = cp_val),"
"0","                          method=""class"") #classification task"
"0",""
"0","      ###########################################"
"0",""
"0","        # Predict on train data"
"0","        set.seed(123)"
"0","        fittedtrain <- unname(predict(tree_fit, type = 'class'))"
"0",""
"0","        # Train confusion matrix"
"0","        train_conf_mat <- confusionMatrix(data=fittedtrain, #predicted"
"0","                                          reference=as.factor(df_train_fold$president_label), #true"
"0","                                          mode = ""everything"") #all metrics"
"0",""
"0","        #ensure Nan and NA values are 0 --> Nans appear when division by 0"
"0","        train_conf_mat$byClass[is.na(train_conf_mat$byClass)] <- 0"
"0","        train_conf_mat$byClass[is.nan(train_conf_mat$byClass)] <- 0"
"0",""
"0","        # Compute the average train accuracy"
"0","        train_accuracy_values[fold] <- round(train_conf_mat$overall['Accuracy'], 3)"
"0",""
"0","        # Compute the average train recall"
"0","        train_recall_values[fold] <- round(mean(train_conf_mat$byClass[,'Sensitivity']), 3)"
"0",""
"0",""
"0","        # Compute the average train positive predictive value or ""precision"""
"0","        train_ppv_values[fold] <- round(mean(train_conf_mat$byClass[,'Pos Pred Value']), 3)"
"0",""
"0","        # Compute the average train F1-score"
"0","        train_f1_values[fold] <- round(mean(train_conf_mat$byClass[,'F1']), 3)"
"0",""
"0","        ###########################################"
"0",""
"0","        # Predict on validation set"
"0","        set.seed(123)"
"0","        fittedvalid <- unname(predict(tree_fit, df_valid_fold, type = 'class'))"
"0",""
"0","        # validation set confusion matrix"
"0","        valid_conf_mat <- confusionMatrix(data=fittedvalid, #predicted"
"0","                                          reference=as.factor(df_valid_fold$president_label), #true"
"0","                                          mode = ""everything"") #all metrics"
"0",""
"0","        #ensure Nan and NA values are 0"
"0","        valid_conf_mat$byClass[is.na(valid_conf_mat$byClass)] <- 0"
"0","        valid_conf_mat$byClass[is.nan(valid_conf_mat$byClass)] <- 0"
"0",""
"0","        # Compute the average validation accuracy"
"0","        valid_accuracy_values[fold] <- round(valid_conf_mat$overall['Accuracy'], 3)"
"0",""
"0","        # Compute the average validation recall"
"0","        valid_recall_values[fold] <- round(mean(valid_conf_mat$byClass[,'Sensitivity']), 3)"
"0",""
"0","        # Compute the average validation positive predictive value or ""precision"""
"0","        valid_ppv_values[fold] <- round(mean(valid_conf_mat$byClass[,'Pos Pred Value']), 3)"
"0",""
"0","        # Compute the average validation F1-score"
"0","        valid_f1_values[fold] <- round(mean(valid_conf_mat$byClass[,'F1']), 3)"
"0",""
"0","      }"
"0","      ###########################################"
"0",""
"0","      # Calculate the mean results across all folds"
"0","      "
"0","      ##Accuracy"
"0","      mean_train_accuracy <- mean(train_accuracy_values) #train"
"0","      mean_valid_accuracy <- mean(valid_accuracy_values) #validation"
"0","      "
"0","      ##recall"
"0","      mean_train_recall <- mean(train_recall_values) #train"
"0","      mean_valid_recall <- mean(valid_recall_values) #validation"
"0","      "
"0",""
"0","      ##Positive predictive value"
"0","      mean_train_ppv <- mean(train_ppv_values) #train"
"0","      mean_valid_ppv <- mean(valid_ppv_values) #validation"
"0","      "
"0","      ##F1-score"
"0","      mean_train_f1 <- mean(train_f1_values) #train"
"0","      mean_valid_f1 <- mean(valid_f1_values) #validation"
"0","      "
"0",""
"0","      ###########################################"
"0",""
"0","      # Store the results"
"0","      results <- rbind(results, data.frame(cp = cp_val,"
"0","                                           minbucket = minbuck,"
"0","                                           minsplit = minspl,"
"0","                                           train_accuracy = mean_train_accuracy,"
"0","                                           valid_accuracy = mean_valid_accuracy,"
"0","                                           train_recall = mean_train_recall,"
"0","                                           valid_recall = mean_valid_recall,"
"0","                                           train_ppv = mean_train_ppv, valid_ppv = mean_valid_ppv,"
"0","                                           train_f1 = mean_train_f1, valid_f1 = mean_valid_f1"
"0","                                           ))"
"0","    }"
"0","  }"
"0","}"
